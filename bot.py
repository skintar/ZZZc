"""–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞."""

import logging
import asyncio
import signal
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramAPIError
from aiogram.types import BotCommand

from config import BotConfig, MESSAGES
from services import CharacterService, SessionService, RankingService
from handlers import BotHandlers


logger = logging.getLogger(__name__)


class CharacterBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    
    def __init__(self, config: BotConfig):
        self.config = config
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.handlers: Optional[BotHandlers] = None
        self._shutdown_event = asyncio.Event()
        self._backup_task: Optional[asyncio.Task] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.character_service = CharacterService(config.characters_dir)
        self.session_service = SessionService(self.character_service)
        self.ranking_service = RankingService(self.character_service)
        
        self._setup_logging()
        self._setup_bot()
        self._setup_handlers()
        self._setup_signal_handlers()
    
    def _setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        logging.basicConfig(
            level=getattr(logging, self.config.log_level),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('bot.log', encoding='utf-8')
            ]
        )
    
    def _setup_bot(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä."""
        self.bot = Bot(
            self.config.api_token,
            default=DefaultBotProperties(parse_mode="Markdown")
        )
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è Telegram-–∫–ª–∏–µ–Ω—Ç–æ–≤
        async def set_commands():
            try:
                await self.bot.set_my_commands([
                    BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                    BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
                    BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
                    BotCommand(command="reload_characters", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–∞–¥–º–∏–Ω)"),
                    BotCommand(command="add_characters", description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–∞–¥–º–∏–Ω)"),
                ])
            except Exception:
                pass
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TMA
        async def setup_tma():
            try:
                from aiogram.types import MenuButtonWebApp, WebAppInfo
                # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º http, –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - https
                if self.config.tma_domain.startswith('localhost'):
                    web_app_url = f"http://{self.config.tma_domain}/web/simple-tma.html"
                else:
                    web_app_url = f"https://{self.config.tma_domain}/web/simple-tma.html"
                await self.bot.set_chat_menu_button(
                    menu_button=MenuButtonWebApp(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", web_app=WebAppInfo(url=web_app_url))
                )
                logger.info(f"TMA –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {web_app_url}")
            except ImportError:
                logger.warning("TMA –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ aiogram")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TMA: {e}")
        
        # –í—ã–∑–æ–≤–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        asyncio.create_task(set_commands())
        asyncio.create_task(setup_tma())
    
    def _setup_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.handlers = BotHandlers(
            self.character_service,
            self.session_service,
            self.ranking_service,
            self.config.flood_delay
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        @self.dp.message(CommandStart())
        async def handle_start(message):
            await self.handlers.handle_start_message(message, self.bot)
        
        @self.dp.message(Command("help"))
        async def handle_help(message):
            await self.handlers.handle_help_command(message, self.bot)
        
        @self.dp.message(Command("menu"))
        async def handle_menu(message):
            await self.handlers.handle_start_message(message, self.bot)
        
        @self.dp.message(Command("add_characters"))
        async def handle_add_characters(message):
            await self.handlers.handle_add_characters_command(message, self.bot)
        
        @self.dp.message(Command("reload_characters"))
        async def handle_reload_characters(message):
            await self.handlers.handle_reload_characters(message, self.bot)
        
        @self.dp.message()
        async def handle_message(message):
            await self.handlers.handle_start_message(message, self.bot)
        
        @self.dp.callback_query(lambda c: c.data and c.data.startswith('choose:'))
        async def handle_callback(callback_query):
            await self.handlers.handle_choice_callback(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'show_my_rating')
        async def handle_show_my_rating(callback_query):
            await self.handlers.handle_show_my_rating(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'show_global_top')
        async def handle_show_global_top(callback_query):
            await self.handlers.handle_show_global_top(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'start_ranking')
        async def handle_start_ranking(callback_query):
            await self.handlers.handle_start_ranking(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data and c.data.startswith('mode_'))
        async def handle_mode_selection(callback_query):
            await self.handlers.handle_mode_selection(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'back_to_menu')
        async def handle_back_to_menu(callback_query):
            await self.handlers.handle_back_to_menu(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'rate_new_characters')
        async def handle_rate_new_characters(callback_query):
            await self.handlers.handle_rate_new_characters(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'show_full_ranking')
        async def handle_show_full_ranking(callback_query):
            await self.handlers.handle_show_full_ranking(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'go_back')
        async def handle_go_back(callback_query):
            await self.handlers.handle_go_back(callback_query, self.bot)
        
        @self.dp.callback_query(lambda c: c.data == 'continue_session')
        async def handle_continue_session(callback_query):
            await self.handlers.handle_continue_session(callback_query, self.bot)
    
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
            self._shutdown_event.set()
        
        try:
            signal.signal(signal.SIGINT, signal_handler)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å SIGINT: {e}")
        # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö SIGTERM –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        try:
            if hasattr(signal, "SIGTERM"):
                signal.signal(signal.SIGTERM, signal_handler)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å SIGTERM: {e}")
    
    def _start_backup_task(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
        async def backup_task():
            while not self._shutdown_event.is_set():
                try:
                    await asyncio.sleep(self.config.backup_interval)
                    if not self._shutdown_event.is_set():
                        logger.debug("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞")
                        self.session_service.create_backup()
                        # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                        self.session_service.cleanup_completed_sessions()
                        logger.debug("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω")
                except asyncio.CancelledError:
                    logger.debug("–ó–∞–¥–∞—á–∞ –±—ç–∫–∞–ø–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –±—ç–∫–∞–ø–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
                    
        try:
            self._backup_task = asyncio.create_task(backup_task())
            logger.debug("–ó–∞–¥–∞—á–∞ –±—ç–∫–∞–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        except RuntimeError as e:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äî –∑–∞–ø—É—Å—Ç–∏–º –ø–æ–∑–∂–µ –≤ start()
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –±—ç–∫–∞–ø–∞: {e}")

    async def _stop_backup_task(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –±—ç–∫–∞–ø–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞."""
        if self._backup_task is not None:
            self._backup_task.cancel()
            try:
                await self._backup_task
            except asyncio.CancelledError:
                pass
            finally:
                self._backup_task = None
    
    def validate_setup(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
            if not self.character_service.validate_characters_directory():
                logger.error(
                    MESSAGES["characters_dir_missing"].format(
                        dir=self.config.characters_dir
                    )
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            missing_files = self.character_service.validate_character_files()
            if missing_files:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {missing_files}")
                return False
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.character_service.characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        if not self.validate_setup():
            logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞")
            return
        
        logger.info(MESSAGES["bot_started"])
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—ç–∫–∞–ø–æ–≤: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
            self.session_service.cleanup_old_backups(self.config.max_backups)
            self._start_backup_task()
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ –∏ –æ–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            polling_task = asyncio.create_task(self.dp.start_polling(self.bot))
            shutdown_waiter = asyncio.create_task(self._shutdown_event.wait())
            done, pending = await asyncio.wait({polling_task, shutdown_waiter}, return_when=asyncio.FIRST_COMPLETED)
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            if shutdown_waiter in done and not polling_task.done():
                try:
                    # –í aiogram 3 –µ—Å—Ç—å –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–ª–∏–Ω–≥–∞
                    if hasattr(self.dp, "stop_polling"):
                        await self.dp.stop_polling()
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
                finally:
                    polling_task.cancel()
                    try:
                        await polling_task
                    except asyncio.CancelledError:
                        pass
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            raise
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
            self._shutdown_event.set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.cleanup()
    
    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º graceful shutdown."""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        
        try:
            # –®–∞–≥ 1: –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            logger.info("üö® –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            self._shutdown_event.set()
            
            # –®–∞–≥ 2: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã)
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            
            # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏...")
            try:
                active_sessions = len([s for s in self.session_service._sessions.values() if not s.is_completed])
                if active_sessions > 0:
                    logger.info(f"üíæ –ù–∞–π–¥–µ–Ω–æ {active_sessions} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–µ—Å—Å–∏–π: {e}")
            
            # –®–∞–≥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±—ç–∫–∞–ø–æ–º
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            self.session_service.force_save_with_backup()
            logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        
        # –®–∞–≥ 5: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –±—ç–∫–∞–ø–∞
        try:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –±—ç–∫–∞–ø–∞...")
            await self._stop_backup_task()
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –±—ç–∫–∞–ø–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –±—ç–∫–∞–ø–∞: {e}")

        # –®–∞–≥ 6: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram
        if self.bot:
            try:
                logger.info("üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram...")
                await self.bot.session.close()
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        
        logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


async def create_and_run_bot(config: BotConfig) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    bot = CharacterBot(config)
    await bot.start()
