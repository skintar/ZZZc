"""–°–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏."""

import os
import json
import logging
import asyncio
import threading
import hashlib
import time
from typing import List, Dict, Optional
from collections import defaultdict

from models import Character, SimpleTransitiveSession as UserSession, RankingEntry
from config import CHARACTER_NAMES, MESSAGES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import DatabaseManager
    DATABASE_AVAILABLE = True
except ImportError:
    DATABASE_AVAILABLE = False
    DatabaseManager = None

logger = logging.getLogger(__name__)


class CharacterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏."""
    
    def __init__(self, characters_dir: str):
        self.characters_dir = characters_dir
        self._characters: Optional[List[Character]] = None
        self._name_to_index: Optional[Dict[str, int]] = None
    
    @property
    def characters(self) -> List[Character]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        if self._characters is None:
            self._characters = self._load_characters()
            # –ü–æ—Å—Ç—Ä–æ–∏–º –±—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å –∏–º—è -> –∏–Ω–¥–µ–∫—Å
            self._name_to_index = {c.name: i for i, c in enumerate(self._characters)}
        return self._characters
    
    def _load_characters(self) -> List[Character]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ø–∞–ø–∫–∏, –∏–Ω–∞—á–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        characters: List[Character] = []
        
        try:
            if os.path.isdir(self.characters_dir):
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ .png –∫–∞–∫ –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                try:
                    files = [f for f in os.listdir(self.characters_dir) if f.lower().endswith('.png')]
                    names = [os.path.splitext(f)[0] for f in files]
                    names.sort()
                    
                    for name in names:
                        if not name.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
                            continue
                        image_path = os.path.join(self.characters_dir, f"{name}.png")
                        if os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                            characters.append(Character(name=name, image_path=image_path))
                            
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                    self._update_missing_emojis(names)
                    
                except (OSError, PermissionError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.characters_dir}: {e}")
            
            # –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            if not characters:
                logger.warning(f"–ü–∞–ø–∫–∞ {self.characters_dir} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                for name in CHARACTER_NAMES:
                    image_path = os.path.join(self.characters_dir, f"{name}.png")
                    characters.append(Character(name=name, image_path=image_path))
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            characters = [Character(name="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", image_path="unknown.png")]
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        return characters
    
    def _update_missing_emojis(self, character_names: List[str]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ CHARACTER_EMOJIS."""
        try:
            from config import CHARACTER_EMOJIS
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            default_emojis = ["üé≠", "üé™", "üí´", "‚ú®", "üåü", "üî•", "‚ö°", "üåà", "üåç", "üéÜ"]
            emoji_index = 0
            
            missing_characters = []
            for name in character_names:
                if name not in CHARACTER_EMOJIS:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
                    emoji = default_emojis[emoji_index % len(default_emojis)]
                    CHARACTER_EMOJIS[name] = emoji
                    emoji_index += 1
                    missing_characters.append(name)
            
            if missing_characters:
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {missing_characters}")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏: {e}")

    def reload_characters(self) -> int:
        """–ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
        self._characters = None
        loaded = len(self.characters)
        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã: {loaded}")
        return loaded

    def get_index_by_name(self, name: str) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –∑–∞ O(1)."""
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω
        if self._name_to_index is None and self._characters is not None:
            self._name_to_index = {c.name: i for i, c in enumerate(self._characters)}
        if self._name_to_index is None:
            # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–≥—Ä—É–∑–∫—É
            _ = self.characters
        return self._name_to_index.get(name) if self._name_to_index else None
    
    def validate_characters_directory(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏."""
        return os.path.exists(self.characters_dir)
    
    def validate_character_files(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö."""
        missing_files = []
        for character in self.characters:
            if not os.path.exists(character.image_path):
                missing_files.append(character.image_path)
        
        if missing_files:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        
        return missing_files
    
    def get_character_by_index(self, index: int) -> Optional[Character]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if 0 <= index < len(self.characters):
            return self.characters[index]
        return None
    
    def get_characters_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        return len(self.characters)
    
    def get_newly_discovered_characters(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫–µ, –Ω–æ –Ω–µ –≤ config.py."""
        try:
            from config import CHARACTER_NAMES
            current_names = [c.name for c in self.characters]
            newly_discovered = [name for name in current_names if name not in CHARACTER_NAMES]
            return newly_discovered
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            return []


class SessionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    
    def __init__(self, character_service: Optional['CharacterService'] = None, use_database: bool = True, database_path: str = "character_bot.db"):
        self._sessions: Dict[int, UserSession] = {}
        self.character_service = character_service
        self._file_lock = threading.Lock()
        self._last_backup_hash: Optional[str] = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.use_database = use_database and DATABASE_AVAILABLE
        self.db_manager = None
        
        if self.use_database:
            try:
                self.db_manager = DatabaseManager(database_path)
                logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {database_path}")
                self._load_sessions_from_database()
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                logger.info("üìÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
                self.use_database = False
        
        if not self.use_database:
            # –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
            self._global_stats_file = "global_stats.json"
            self._global_stats = self._load_global_stats()
            self._save_counter = 0
            self._new_characters_file = "new_characters.json"
            self._new_characters = self._load_new_characters()
            self._sessions_file = "active_sessions.json"
            self._load_sessions()

    def _load_global_stats(self) -> Dict[int, List[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        if not os.path.exists(self._global_stats_file):
            return {}
            
        try:
            with open(self._global_stats_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ int
            result = {}
            for uid, top in data.items():
                try:
                    user_id = int(uid)
                    if isinstance(top, list) and all(isinstance(item, str) for item in top):
                        result[user_id] = top
                    else:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
                except (ValueError, TypeError):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
                    continue
                    
            return result
            
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {self._global_stats_file}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try:
                backup_path = f"{self._global_stats_file}.corrupted.{int(time.time())}"
                import shutil
                shutil.copy2(self._global_stats_file, backup_path)
                logger.info(f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_path}")
            except (IOError, OSError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return {}
        except (IOError, OSError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {self._global_stats_file}: {e}")
            return {}

    def _save_global_stats(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            with self._file_lock:
                with open(self._global_stats_file, "w", encoding="utf-8") as f:
                    json.dump(self._global_stats, f, ensure_ascii=False, indent=2)
            
            self._save_counter += 1
            logger.debug(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({len(self._global_stats)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ #{self._save_counter})")
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            self.create_backup_if_needed()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _normalize_full_ranking(self, top_characters: List[str]) -> List[str]:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ü–û–õ–ù–´–ô –ø–æ—Ä—è–¥–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        if not self.character_service:
            return top_characters[:50] if len(top_characters) > 50 else top_characters  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
        try:
            all_names = [c.name for c in self.character_service.characters]
            if not all_names:
                logger.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
                return top_characters
                
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
            valid_top = [name for name in top_characters if name in all_names]
            
            if len(valid_top) >= len(all_names):
                return valid_top[:len(all_names)]
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            remaining = [name for name in all_names if name not in valid_top]
            return valid_top + remaining
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            return top_characters

    def create_backup(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            if os.path.exists(self._global_stats_file):
                current_hash = self._calculate_file_hash(self._global_stats_file)
                if self._last_backup_hash == current_hash:
                    logger.debug("–ü—Ä–æ–ø—É—Å–∫ –±—ç–∫–∞–ø–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞")
                    return
                from datetime import datetime
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_file = f"{self._global_stats_file}.{timestamp}"
                import shutil
                with self._file_lock:
                    shutil.copy2(self._global_stats_file, backup_file)
                self._last_backup_hash = current_hash
                logger.info(f"–°–æ–∑–¥–∞–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø: {backup_file}")
                # –ü–æ–¥—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                self.cleanup_old_backups(keep_count=5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
    
    def create_backup_if_needed(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        if self._save_counter >= 10:  # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
            try:
                if os.path.exists(self._global_stats_file):
                    current_hash = self._calculate_file_hash(self._global_stats_file)
                    if self._last_backup_hash != current_hash:
                        from datetime import datetime
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        backup_file = f"{self._global_stats_file}.{timestamp}"
                        import shutil
                        with self._file_lock:
                            shutil.copy2(self._global_stats_file, backup_file)
                        self._last_backup_hash = current_hash
                        logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: {backup_file}")
                        # –ü–æ–¥—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
                        self.cleanup_old_backups(keep_count=5)
                    else:
                        logger.debug("–ü—Ä–æ–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
                    self._save_counter = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")

    def cleanup_old_backups(self, keep_count: int = 5) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ keep_count."""
        try:
            import glob
            backup_files = glob.glob(f"{self._global_stats_file}.*")
            backup_files.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            for old_backup in backup_files[keep_count:]:
                os.remove(old_backup)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_backup}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

    def update_user_ranking(self, user_id: int, top_characters: List[str]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if not isinstance(user_id, int) or user_id <= 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {user_id}")
            return
            
        if not isinstance(top_characters, list):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ top_characters: {type(top_characters)}")
            return
            
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        top_characters = self._normalize_full_ranking(top_characters)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥
        old_ranking = self._global_stats.get(user_id)
        if old_ranking != top_characters:
            self._global_stats[user_id] = top_characters
            self._save_global_stats()
            logger.info(f"–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.debug(f"–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    
    def update_user_ranking_with_backup(self, user_id: int, top_characters: List[str]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞)."""
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        top_characters = self._normalize_full_ranking(top_characters)
        old_ranking = self._global_stats.get(user_id)
        if old_ranking != top_characters:
            self._global_stats[user_id] = top_characters
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if os.path.exists(self._global_stats_file):
                with self._file_lock:
                    backup_file = f"{self._global_stats_file}.backup"
                    import shutil
                    shutil.copy2(self._global_stats_file, backup_file)
            
            self._save_global_stats()
            logger.info(f"–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –±—ç–∫–∞–ø–æ–º")
        else:
            logger.debug(f"–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")

    def get_last_user_ranking(self, user_id: int) -> Optional[List[str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)."""
        ranking = self._global_stats.get(user_id)
        if ranking:
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(ranking)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        else:
            logger.warning(f"–†–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ranking

    def get_global_top_characters(self, top_n: int = 5) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        from collections import Counter
        all_tops = list(self._global_stats.values())
        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ, –≤—Ç–æ—Ä–æ–º –∏ —Ç.–¥.
        counter = Counter()
        for top in all_tops:
            for name in top[:top_n]:
                counter[name] += 1
        # –ë–µ—Ä—ë–º top_n —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
        most_common = counter.most_common(top_n)
        return [name for name, _ in most_common]

    
    def remove_session(self, user_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id in self._sessions:
            del self._sessions[user_id]
            self._save_sessions()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞")
    
    def should_continue_session(self, session: UserSession) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∞–∫—Å–∏–º—É–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if session.max_comparisons is not None and len(session.results) >= session.max_comparisons:
            return False
            
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–∞—Ä—É
        next_pair = session.get_next_pair()
        return next_pair is not None
    
    def has_sufficient_data(self, session: UserSession) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
        # –ú–∏–Ω–∏–º—É–º 15-20 —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        return len(session.results) >= 15
    
    def force_save_with_backup(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –±—ç–∫–∞–ø–æ–º (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã)."""
        try:
            if os.path.exists(self._global_stats_file):
                from datetime import datetime
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_file = f"{self._global_stats_file}.{timestamp}"
                import shutil
                with self._file_lock:
                    shutil.copy2(self._global_stats_file, backup_file)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: {backup_file}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            with self._file_lock:
                with open(self._global_stats_file, "w", encoding="utf-8") as f:
                    json.dump(self._global_stats, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞ –∏ –ø–æ–¥—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ
            if os.path.exists(self._global_stats_file):
                self._last_backup_hash = self._calculate_file_hash(self._global_stats_file)
            self.cleanup_old_backups(keep_count=5)

            logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def _calculate_file_hash(self, path: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MD5-—Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        try:
            md5 = hashlib.md5()
            with open(path, 'rb') as f:
                for chunk in iter(lambda: f.read(8192), b''):
                    md5.update(chunk)
            return md5.hexdigest()
        except (IOError, OSError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—ç—à–∞: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞: {e}")
            return None
    
    def _load_new_characters(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö."""
        if os.path.exists(self._new_characters_file):
            try:
                with open(self._new_characters_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
                return {}
        return {}
    
    def _save_new_characters(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö."""
        try:
            with open(self._new_characters_file, "w", encoding="utf-8") as f:
                json.dump(self._new_characters, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
    
    def add_new_characters(self, character_names: List[str]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –æ—Ç–º–µ—á–∞–µ—Ç –∏—Ö –∫–∞–∫ –Ω–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Å–ø–∏—Å–æ–∫
        if timestamp not in self._new_characters:
            self._new_characters[timestamp] = character_names
        else:
            self._new_characters[timestamp].extend(character_names)
        
        self._save_new_characters()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {character_names}")
    
    def get_new_characters_for_user(self, user_id: int) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_ranking = self._global_stats.get(user_id, [])
        all_new_characters = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        for timestamp, characters in self._new_characters.items():
            all_new_characters.extend(characters)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return [char for char in all_new_characters if char not in user_ranking]
    
    def mark_characters_as_rated(self, user_id: int, character_names: List[str]) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–∞–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for timestamp in list(self._new_characters.keys()):
            self._new_characters[timestamp] = [
                char for char in self._new_characters[timestamp] 
                if char not in character_names
            ]
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        self._new_characters = {
            timestamp: chars for timestamp, chars in self._new_characters.items() 
            if chars
        }
        
        self._save_new_characters()
        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ {character_names} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_users_with_ratings(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏."""
        return list(self._global_stats.keys())
    
    def has_new_characters(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏."""
        return len(self.get_new_characters_for_user(user_id)) > 0
    
    def notify_all_users_about_new_characters(self, bot) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö."""
        users_with_ratings = self.get_users_with_ratings()
        
        for user_id in users_with_ratings:
            if self.has_new_characters(user_id):
                try:
                    new_chars = self.get_new_characters_for_user(user_id)
                    message = (
                        f"üéâ **–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!** üéâ\n\n"
                        f"–ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n"
                        f"{', '.join(new_chars)}\n\n"
                        f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –æ—Ü–µ–Ω–∫—É!"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –±–µ–∑ await)
                    asyncio.create_task(
                        bot.send_message(user_id, message, parse_mode="Markdown")
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


    
    def _load_sessions(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
        if not os.path.exists(self._sessions_file):
            return
        
        try:
            with open(self._sessions_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            
            for user_id_str, session_data in data.items():
                user_id = int(user_id_str)
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                session = UserSession(
                    characters_count=session_data["characters_count"],
                    max_comparisons=session_data.get("max_comparisons"),
                    new_characters_only=session_data.get("new_characters_only", False),
                    new_character_indices=session_data.get("new_character_indices", [])
                )
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                session.comparisons_made = session_data.get("comparisons_made", 0)
                session.results = session_data.get("results", {})
                session.wins = session_data.get("wins", {})
                session.choice_history = session_data.get("choice_history", [])
                session.learned_preferences = session_data.get("learned_preferences", {})
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                if hasattr(session, '_recalculate_transitivity'):
                    session._recalculate_transitivity()
                
                self._sessions[user_id] = session
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
    
    def _save_sessions(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª."""
        try:
            sessions_data = {}
            for user_id, session in self._sessions.items():
                if not session.is_completed:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    sessions_data[str(user_id)] = {
                        "characters_count": session.characters_count,
                        "max_comparisons": session.max_comparisons,
                        "new_characters_only": session.new_characters_only,
                        "new_character_indices": session.new_character_indices,
                        "comparisons_made": session.comparisons_made,
                        "results": session.results,
                        "wins": session.wins,
                        "choice_history": session.choice_history,
                        "learned_preferences": session.learned_preferences
                    }
            
            with open(self._sessions_file, "w", encoding="utf-8") as f:
                json.dump(sessions_data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
    
    def get_session(self, user_id: int) -> Optional[UserSession]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self._sessions.get(user_id)
    
    def record_choice(self, user_id: int, pair: tuple, winner: int) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        session = self._sessions.get(user_id)
        if session:
            session.record_choice(pair, winner)
            # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 5 –≤—ã–±–æ—Ä–æ–≤ –∏–ª–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if session.comparisons_made % 5 == 0 or session.is_completed:
                self._save_sessions()
            else:
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                if not hasattr(self, '_dirty_sessions'):
                    self._dirty_sessions = set()
                self._dirty_sessions.add(user_id)
    
    def undo_last_choice(self, user_id: int) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        session = self._sessions.get(user_id)
        if session and session.undo_last_choice():
            # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if not hasattr(self, '_dirty_sessions'):
                self._dirty_sessions = set()
            self._dirty_sessions.add(user_id)
            return True
        return False
    
    def cleanup_completed_sessions(self, max_age_hours: int = 24) -> int:
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏."""
        if not hasattr(self, '_sessions'):
            return 0
            
        current_time = time.time()
        sessions_to_remove = []
        
        for user_id, session in self._sessions.items():
            should_remove = False
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            if session.is_completed:
                should_remove = True
                logger.debug(f"–û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é {user_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
            elif hasattr(session, 'choice_history') and session.choice_history:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É?
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
                if len(session.choice_history) == 0:
                    # –ü—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ - —É–¥–∞–ª—è–µ–º
                    should_remove = True
                    logger.debug(f"–û—Ç–º–µ—á–∞–µ–º –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é {user_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            if should_remove:
                sessions_to_remove.append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        removed_count = 0
        for user_id in sessions_to_remove:
            if user_id in self._sessions:
                del self._sessions[user_id]
                removed_count += 1
                logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞")
        
        if removed_count > 0:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {removed_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            self._save_sessions()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        return removed_count
    
    def flush_dirty_sessions(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏."""
        if hasattr(self, '_dirty_sessions') and self._dirty_sessions:
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(self._dirty_sessions)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            self._save_sessions()
            self._dirty_sessions.clear()
    
    def force_save_with_backup(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            self.flush_dirty_sessions()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏
            self._save_sessions()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.ranking_service._save_global_stats()
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            self.create_backup()
            
            logger.info("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –±—ç–∫–∞–ø–æ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    def create_session(self, user_id: int, characters_count: int = None, max_comparisons: int = None) -> Optional[UserSession]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if not isinstance(user_id, int) or user_id <= 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {user_id}")
            return None
            
        if characters_count is None:
            characters_count = self.character_service.get_characters_count() if self.character_service else 1
            
        if not isinstance(characters_count, int) or characters_count < 2:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {characters_count}")
            return None
            
        if max_comparisons is not None and (not isinstance(max_comparisons, int) or max_comparisons < 1):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {max_comparisons}")
            return None
            
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_id in self._sessions:
                del self._sessions[user_id]
                
            session = UserSession(
                characters_count=characters_count,
                max_comparisons=max_comparisons,
                new_characters_only=False
            )
            self._sessions[user_id] = session
            self._save_sessions()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {characters_count}, –º–∞–∫—Å. —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {max_comparisons})")
            return session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def create_new_characters_session(self, user_id: int) -> Optional[UserSession]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        try:
            if not self._new_characters:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            new_character_indices = []
            for char_name in self._new_characters:
                if self.character_service._name_to_index and char_name in self.character_service._name_to_index:
                    new_character_indices.append(self.character_service._name_to_index[char_name])
            
            if not new_character_indices:
                return None
            
            session = UserSession(
                characters_count=self.character_service.get_characters_count(),
                max_comparisons=None,
                new_characters_only=True,
                new_character_indices=new_character_indices
            )
            self._sessions[user_id] = session
            self._save_sessions()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            return session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            return None

    def create_session(self, user_id: int, characters_count: int = None, max_comparisons: int = None) -> Optional[UserSession]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if not isinstance(user_id, int) or user_id <= 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: {user_id}")
            return None
            
        if characters_count is None:
            characters_count = self.character_service.get_characters_count() if self.character_service else 1
            
        if not isinstance(characters_count, int) or characters_count < 2:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {characters_count}")
            return None
            
        if max_comparisons is not None and (not isinstance(max_comparisons, int) or max_comparisons < 1):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {max_comparisons}")
            return None
            
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_id in self._sessions:
                del self._sessions[user_id]
                
            session = UserSession(
                characters_count=characters_count,
                max_comparisons=max_comparisons,
                new_characters_only=False
            )
            self._sessions[user_id] = session
            self._save_sessions()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {characters_count}, –º–∞–∫—Å. —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: {max_comparisons})")
            return session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def create_new_characters_session(self, user_id: int) -> Optional[UserSession]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        try:
            if not self._new_characters:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            new_character_indices = []
            for char_name in self._new_characters:
                if self.character_service._name_to_index and char_name in self.character_service._name_to_index:
                    new_character_indices.append(self.character_service._name_to_index[char_name])
            
            if not new_character_indices:
                return None
            
            session = UserSession(
                characters_count=self.character_service.get_characters_count(),
                max_comparisons=None,
                new_characters_only=True,
                new_character_indices=new_character_indices
            )
            self._sessions[user_id] = session
            self._save_sessions()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            return session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            return None


class RankingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏."""
    
    def __init__(self, character_service: CharacterService):
        self.character_service = character_service
    
    def generate_ranking(self, session: UserSession) -> List[RankingEntry]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π
        wins_count = {}
        for i in range(len(self.character_service.characters)):
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            # —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏
            defeated_count = 0
            for j in range(len(self.character_service.characters)):
                if i != j and (i, j) in session.wins:
                    defeated_count += 1
            wins_count[i] = defeated_count
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥
        win_data = []
        for i in range(len(self.character_service.characters)):
            total_wins = wins_count.get(i, 0)
            win_data.append((total_wins, i))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥
        win_data.sort(reverse=True, key=lambda x: x[0])
        
        ranking = []
        for place, (total_wins, character_index) in enumerate(win_data, 1):
            character = self.character_service.get_character_by_index(character_index)
            if character:
                direct_wins = sum(1 for (a, b), winner in session.results.items() if winner == character_index)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ (–±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è)
                simple_rating = total_wins
                
                ranking.append(RankingEntry(
                    place=place,
                    character_name=character.name,
                    rating=simple_rating,
                    wins=direct_wins,
                    comparisons=len(session.results) // len(self.character_service.characters)  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                ))
        
        return ranking
    
    def format_ranking_text(self, ranking: List[RankingEntry]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥: —Ç–æ–ª—å–∫–æ –º–µ—Å—Ç–æ –∏ –∏–º—è (–±–µ–∑ –æ—á–∫–æ–≤ –∏ –ø–æ–±–µ–¥)."""
        lines = ["üèÜ **–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n"]
        for entry in ranking:
            if entry.place <= 3:
                emoji = ["ü•á", "ü•à", "ü•â"][entry.place - 1]
            elif entry.place <= 10:
                emoji = "‚≠ê"
            else:
                emoji = "üî∏"
            lines.append(f"{emoji} **{entry.place}.** {entry.character_name}")
        return "\n".join(lines) + "\n"
    

    
