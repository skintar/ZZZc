"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤."""

import asyncio
import logging
import random
import time
from typing import Dict, Deque
from collections import deque, defaultdict

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, FSInputFile
from aiogram.exceptions import TelegramRetryAfter, TelegramAPIError

from services import CharacterService, SessionService, RankingService
from config import MESSAGES, CHARACTER_EMOJIS, MOTIVATIONAL_PHRASES, EVALUATION_MODES


logger = logging.getLogger(__name__)


class AdvancedFloodControl:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ —Å —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ –æ–∫–Ω–∞–º–∏."""
    
    def __init__(self, requests_per_minute: int = 20, burst_limit: int = 5):
        self.requests_per_minute = requests_per_minute
        self.burst_limit = burst_limit
        self.user_requests: Dict[int, Deque[float]] = defaultdict(deque)
        self.temp_bans: Dict[int, float] = {}  # user_id -> ban_end_time
        self.warning_counts: Dict[int, int] = defaultdict(int)
    
    def is_rate_limited(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
        if user_id in self.temp_bans:
            if current_time < self.temp_bans[user_id]:
                return True
            else:
                del self.temp_bans[user_id]
                self.warning_counts[user_id] = 0
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        user_queue = self.user_requests[user_id]
        while user_queue and current_time - user_queue[0] > 60:
            user_queue.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        if len(user_queue) >= self.requests_per_minute:
            self._apply_penalty(user_id, current_time)
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º burst –ª–∏–º–∏—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥)
        recent_requests = sum(1 for req_time in user_queue if current_time - req_time <= 10)
        if recent_requests >= self.burst_limit:
            self._apply_penalty(user_id, current_time)
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_queue.append(current_time)
        return False
    
    def _apply_penalty(self, user_id: int, current_time: float) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        self.warning_counts[user_id] += 1
        warnings = self.warning_counts[user_id]
        
        if warnings == 1:
            # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –±–∞–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            ban_duration = 30
        elif warnings == 2:
            # –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –±–∞–Ω –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
            ban_duration = 120
        elif warnings >= 3:
            # –¢—Ä–µ—Ç—å–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ - –±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
            ban_duration = 600
        else:
            ban_duration = 30
        
        self.temp_bans[user_id] = current_time + ban_duration
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {ban_duration} —Å–µ–∫—É–Ω–¥ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ #{warnings})")
    
    def get_remaining_ban_time(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–∞–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if user_id not in self.temp_bans:
            return 0
        
        remaining = self.temp_bans[user_id] - time.time()
        return max(0, int(remaining))
    
    def cleanup_old_data(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏."""
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–∞–Ω—ã
        expired_bans = [uid for uid, ban_time in self.temp_bans.items() if current_time >= ban_time]
        for uid in expired_bans:
            del self.temp_bans[uid]
            self.warning_counts[uid] = 0
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_users = []
        for user_id, requests in self.user_requests.items():
            # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
            while requests and current_time - requests[0] > 3600:
                requests.popleft()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ —á–∞—Å–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            if not requests or current_time - requests[-1] > 3600:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            if user_id in self.user_requests:
                del self.user_requests[user_id]
            if user_id in self.warning_counts:
                del self.warning_counts[user_id]
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""
    
class BotHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""
    
    def __init__(
        self,
        character_service: CharacterService,
        session_service: SessionService,
        ranking_service: RankingService,
        flood_delay: float = 0.5
    ):
        self.character_service = character_service
        self.session_service = session_service
        self.ranking_service = ranking_service
        
        # –ù–æ–≤–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞
        self._flood_control = AdvancedFloodControl(requests_per_minute=20, burst_limit=5)
        
        # –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._last_action_time: Dict[int, float] = {}
        self._flood_delay = flood_delay
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
        self._main_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÜ –°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="start_ranking"),
             InlineKeyboardButton(text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø", callback_data="show_global_top")],
            [InlineKeyboardButton(text="üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_my_rating")]
        ])
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._post_result_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", callback_data="start_ranking"),
             InlineKeyboardButton(text="üìä –ú–æ–π —Ç–æ–ø", callback_data="show_my_rating")],
            [InlineKeyboardButton(text="üåç –û–±—â–∏–π —Ç–æ–ø", callback_data="show_global_top"),
             InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    
    def _check_flood_control(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É
        is_limited = self._flood_control.is_rate_limited(user_id)
        
        if is_limited:
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                self._flood_control.cleanup_old_data()
        
        return not is_limited
    
    def _get_flood_warning(self, user_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö."""
        remaining_ban = self._flood_control.get_remaining_ban_time(user_id)
        if remaining_ban > 0:
            minutes = remaining_ban // 60
            seconds = remaining_ban % 60
            if minutes > 0:
                return f"‚è±Ô∏è –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º {seconds}—Å"
            else:
                return f"‚è±Ô∏è –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: {seconds}—Å"
        return MESSAGES["flood_warning"]
    
    async def handle_start_message(self, message: types.Message, bot) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        user_id = message.from_user.id
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            user_info = {
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
            if not self._check_flood_control(user_id):
                await self._send_message_safe(bot, message.chat.id, self._get_flood_warning(user_id))
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            missing_files = self.character_service.validate_character_files()
            if missing_files:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {missing_files}")
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤ –ª–æ–≥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
            session = self.session_service.get_session(user_id)
            if session and not session.is_completed:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="continue_session")],
                    [InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_ranking")],
                    [InlineKeyboardButton(text="üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_my_rating")],
                    [InlineKeyboardButton(text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø", callback_data="show_global_top")],
                ])
                await self._send_message_safe(
                    bot, 
                    message.chat.id,
                    "üîÑ **–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –æ—Ü–µ–Ω–∫–∏!**\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.reply(MESSAGES["start"], reply_markup=self._main_menu)
            
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply(MESSAGES["error_network"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply(MESSAGES["error_generic"])

    async def handle_help_command(self, message: types.Message, bot) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
        try:
            await message.reply(MESSAGES["help"], parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã help: {e}")
            await message.reply(MESSAGES["error_generic"])

    async def handle_reload_characters(self, message: types.Message, bot) -> None:
        """–ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏ –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)."""
        admin_ids = [6480088003]
        if message.from_user.id not in admin_ids:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            newly_discovered_before = self.character_service.get_newly_discovered_characters()
            
            count = self.character_service.reload_characters()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            newly_discovered_after = self.character_service.get_newly_discovered_characters()
            
            response = f"üîÑ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã: {count}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
            if newly_discovered_after:
                response += f"\n\nüÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:"
                for i, name in enumerate(newly_discovered_after[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10
                    response += f"\n‚Ä¢ {name}"
                
                if len(newly_discovered_after) > 10:
                    response += f"\n... –∏ –µ—â—ë {len(newly_discovered_after) - 10}"
                    
                response += "\n\n‚ÑπÔ∏è –ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ!"
            
            await message.reply(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    
    async def handle_add_characters_command(self, message: types.Message, bot) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add_characters –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤)
        admin_ids = [6480088003]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
        if message.from_user.id not in admin_ids:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = message.text.replace('/add_characters', '').strip()
            if not text:
                await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_characters –ü–µ—Ä—Å–æ–Ω–∞–∂1, –ü–µ—Ä—Å–æ–Ω–∞–∂2, –ü–µ—Ä—Å–æ–Ω–∞–∂3")
                return
            
            character_names = [name.strip() for name in text.split(',')]
            
            # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            try:
                self.character_service.reload_characters()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            existing_characters = [char.name for char in self.character_service.characters]
            valid_characters = []
            invalid_characters = []
            
            for name in character_names:
                if name in existing_characters:
                    valid_characters.append(name)
                else:
                    invalid_characters.append(name)
            
            if invalid_characters:
                await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(invalid_characters)}")
                return
            
            if not valid_characters:
                await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–≤ —Ñ–∞–π–ª–µ new_characters.json)
            self.session_service.add_new_characters(valid_characters)
            # –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            reloaded = self.character_service.reload_characters()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            self.session_service.notify_all_users_about_new_characters(bot)
            
            await message.reply(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(valid_characters)}\n"
                f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤—Å–µ–≥–æ: {reloaded}).\n"
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

    async def handle_show_new_characters_info(self, message: types.Message, bot) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö (–∞–¥–º–∏–Ω)."""
        admin_ids = [6480088003]
        if message.from_user.id not in admin_ids:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            from config import CHARACTER_NAMES
            
            all_characters = [c.name for c in self.character_service.characters]
            newly_discovered = self.character_service.get_newly_discovered_characters()
            
            response = f"üìÅ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö:**\n\n"
            response += f"üìÇ **–í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:** {len(all_characters)}\n"
            response += f"‚öôÔ∏è **–í config.py:** {len(CHARACTER_NAMES)}\n"
            response += f"üÜï **–ù–æ–≤—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:** {len(newly_discovered)}\n\n"
            
            if newly_discovered:
                response += f"üéÜ **–ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:**\n"
                for name in newly_discovered[:15]:  # –ú–∞–∫—Å–∏–º—É–º 15
                    response += f"‚Ä¢ {name}\n"
                
                if len(newly_discovered) > 15:
                    response += f"... –∏ –µ—â—ë {len(newly_discovered) - 15}\n"
                    
                response += "\n‚ÑπÔ∏è **–ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –±–æ—Ç–µ!**\n"
                response += "‚úçÔ∏è –ù–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª—è—Ç—å config.py"
            else:
                response += "‚úÖ **–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã**"
            
            await message.reply(response, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


    async def _send_message_safe(self, bot, chat_id: int, text: str, **kwargs) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            await bot.send_message(chat_id, text, **kwargs)
            return True
            
        except TelegramAPIError as e:
            # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            if "blocked by the user" in str(e).lower() or "bot was blocked" in str(e).lower():
                logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
            
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    

    async def handle_start_ranking(self, callback_query, bot):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        try:
            # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (2 —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ 3)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–π (5–º–∏–Ω)", callback_data="mode_quick"),
                 InlineKeyboardButton(text="üéØ –°—Ä–µ–¥–Ω–∏–π (10–º–∏–Ω)", callback_data="mode_medium")],
                [InlineKeyboardButton(text="üèÜ –¢–æ—á–Ω—ã–π (20–º–∏–Ω)", callback_data="mode_precise"),
                 InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
            
            await callback_query.message.answer(MESSAGES["mode_selection"], reply_markup=keyboard, parse_mode="Markdown")
            await callback_query.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    
    async def handle_mode_selection(self, callback_query, bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ—Ü–µ–Ω–∫–∏."""
        user_id = callback_query.from_user.id
        mode_key = callback_query.data.replace('mode_', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        if mode_key not in EVALUATION_MODES:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º", show_alert=True)
            return
        
        try:
            mode_info = EVALUATION_MODES[mode_key]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
            session = self.session_service.create_session(
                user_id, 
                len(self.character_service.characters),
                max_comparisons=mode_info['max_comparisons']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ü–µ–Ω–∫–∏
            start_message = (
                f"{mode_info['emoji']} **–†–µ–∂–∏–º: {mode_info['name']}**\n\n"
                f"üï∞Ô∏è **–í—Ä–µ–º—è:** {mode_info['estimated_time']}\n"
                f"üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {mode_info['accuracy']}\n"
                f"üèÜ **–¢–æ–ø-3 —Ç–æ—á–Ω–æ—Å—Ç—å:** {mode_info['top3_accuracy']}\n\n"
                f"{mode_info['description']}\n\n"
                f"üéÜ **–ù–∞—á–∏–Ω–∞–µ–º –æ—Ü–µ–Ω–∫—É!**"
            )
            
            await callback_query.message.answer(start_message, parse_mode="Markdown")
            await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
            await callback_query.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    
    async def handle_back_to_menu(self, callback_query, bot):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        try:
            await callback_query.message.answer(MESSAGES["start"], reply_markup=self._main_menu)
            await callback_query.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    
    async def handle_choice_callback(self, callback_query: types.CallbackQuery, bot) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        session = self.session_service.get_session(user_id)
        
        if not session:
            await callback_query.answer(MESSAGES["session_expired"])
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback'–∞
            _, a_str, b_str, choice = callback_query.data.split(':')
            a, b = int(a_str), int(b_str)
            winner = a if choice == "a" else b
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            self.session_service.record_choice(user_id, (a, b), winner)
            
            await callback_query.answer(MESSAGES["choice_accepted"])
            await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
            
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback –¥–∞–Ω–Ω—ã—Ö: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _send_next_pair(self, chat_id: int, user_id: int, bot) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥."""
        session = self.session_service.get_session(user_id)
        if not session:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        if session.is_completed:
            await self._show_ranking(chat_id, user_id, bot)
            return
        
        current_pair = session.get_current_pair()
        
        if not current_pair:
            await self._show_ranking(chat_id, user_id, bot)
            return
        
        a, b = current_pair
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        char_a = self.character_service.get_character_by_index(a)
        char_b = self.character_service.get_character_by_index(b)
        
        if not char_a or not char_b:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ {a} –∏–ª–∏ {b}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            char_a_emoji = CHARACTER_EMOJIS.get(char_a.name, "üé≠")
            char_b_emoji = CHARACTER_EMOJIS.get(char_b.name, "üé≠")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            total_results = len(session.results)
            progress_percent = min(100, int((total_results / session.total_pairs) * 100))
            progress_bar_filled = int(progress_percent / 10)  # 10 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            progress_bar = "üü´" * progress_bar_filled + "‚¨ú" * (10 - progress_bar_filled)
            
            # –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∑–∞ –∫–∞–∂–¥—ã–µ 5 —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
            motivational_text = ""
            if total_results > 0 and total_results % 5 == 0:
                motivational_text = f"\n‚ú® {random.choice(MOTIVATIONAL_PHRASES)}"
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            import os
            if os.path.exists(char_a.image_path) and os.path.exists(char_b.image_path):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—è–º–∏
                    first_caption = f"**{char_a.name}**\n\nü§î **–ö—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?**\nüìä {progress_bar} {progress_percent}%{motivational_text}"
                    media = [
                        InputMediaPhoto(media=FSInputFile(char_a.image_path), caption=first_caption, parse_mode="Markdown"),
                        InputMediaPhoto(media=FSInputFile(char_b.image_path), caption=f"**{char_b.name}**", parse_mode="Markdown")
                    ]
                    
                    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
                    keyboard_buttons = [
                        [
                            InlineKeyboardButton(
                                text=f"{char_a_emoji} {char_a.name}", 
                                callback_data=f"choose:{a}:{b}:a"
                            ),
                            InlineKeyboardButton(
                                text=f"{char_b_emoji} {char_b.name}", 
                                callback_data=f"choose:{a}:{b}:b"
                            )
                        ]
                    ]
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
                    if session.choice_history:
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="go_back"),
                            InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")
                        ])
                    else:
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")
                        ])
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    await bot.send_media_group(chat_id, media)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await bot.send_message(
                        chat_id,
                        "üëá **–í—ã–±–µ—Ä–∏, –∫—Ç–æ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:**",
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    return
                    
                except Exception as img_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {img_error}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.")
            
            # Fallback: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            comparison_text = (
                f"ü§î **–ö—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?**\n\n"
                f"{char_a_emoji} **{char_a.name}**  üÜö  {char_b_emoji} **{char_b.name}**\n\n"
                f"üìä {progress_bar} {progress_percent}%{motivational_text}"
            )
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
            keyboard_buttons = [
                [
                    InlineKeyboardButton(
                        text=f"{char_a_emoji} {char_a.name}", 
                        callback_data=f"choose:{a}:{b}:a"
                    ),
                    InlineKeyboardButton(
                        text=f"{char_b_emoji} {char_b.name}", 
                        callback_data=f"choose:{a}:{b}:b"
                    )
                ]
            ]
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
            if session.choice_history:
                keyboard_buttons.append([
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="go_back"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")
                ])
            else:
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")
                ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(
                chat_id,
                comparison_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            await bot.send_message(
                chat_id, 
                MESSAGES["file_not_found"].format(
                    path_a=char_a.image_path, 
                    path_b=char_b.image_path
                )
            )
    
    async def _show_ranking(self, chat_id: int, user_id: int, bot) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        session = self.session_service.get_session(user_id)
        if not session:
            return
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            ranking = self.ranking_service.generate_ranking(session)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
            mode_info = None
            comparisons_made = len(session.results)
            
            for mode_key, mode_data in EVALUATION_MODES.items():
                if abs(comparisons_made - mode_data['max_comparisons']) <= 5:  # –î–æ–ø—É—Å–∫ 5 —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
                    mode_info = mode_data
                    break
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            top5_ranking = self.ranking_service.format_ranking_text(ranking[:5])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            if mode_info:
                accuracy_info = (
                    f"\n\nüéØ **–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏:**\n"
                    f"‚Ä¢ –û–±—â–∞—è: {mode_info['accuracy']}\n"
                    f"‚Ä¢ –¢–æ–ø-3: {mode_info['top3_accuracy']}\n"
                    f"‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–π: {comparisons_made}\n"
                    f"‚Ä¢ –†–µ–∂–∏–º: {mode_info['name']}"
                )
                top5_ranking += accuracy_info
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ –∏–º–µ–Ω–∞) —Å –±—ç–∫–∞–ø–æ–º
            all_names = [entry.character_name for entry in ranking]
            self.session_service.update_user_ranking_with_backup(user_id, all_names)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Å–µ—Å—Å–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ
            if session.new_characters_only and session.new_character_indices:
                new_character_names = []
                for idx in session.new_character_indices:
                    char = self.character_service.get_character_by_index(idx)
                    if char:
                        new_character_names.append(char.name)
                
                if new_character_names:
                    self.session_service.mark_characters_as_rated(user_id, new_character_names)
                    logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ {new_character_names} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
            top5_ranking = self.ranking_service.format_ranking_text(ranking[:5])
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–Ω–æ–≤—ã–µ –≥–µ—Ä–æ–∏")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_full_ranking"),
                 InlineKeyboardButton(text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø", callback_data="show_global_top")],
                [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="start_ranking"),
                 InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            completion_message = (
                f"üéâ **–†–µ–π—Ç–∏–Ω–≥ –≥–æ—Ç–æ–≤!** üéâ\n\n"
                f"‚ú® –í—ã—à–µ —Ç–æ–ø-5, –Ω–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫!"
            )
            
            await asyncio.gather(
                bot.send_message(chat_id, top5_ranking, reply_markup=keyboard, parse_mode="Markdown"),
                bot.send_message(chat_id, completion_message, parse_mode="Markdown"),
                bot.send_message(chat_id, MESSAGES["restart"])
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            session.save_learning()
            self.session_service.remove_session(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")

    # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
    async def handle_show_my_rating(self, callback_query, bot):
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        last_ranking = self.session_service.get_last_user_ranking(user_id)
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {'—É—Å–ø–µ—à–Ω–æ' if last_ranking else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        if not last_ranking:
            await callback_query.answer(MESSAGES["no_rating"], show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
        top5_text = "üèÜ **–¢–≤–æ–π —Ç–æ–ø-5 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n\n"
        for i, name in enumerate(last_ranking[:5]):
            emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i]
            top5_text += f"{emoji} **{i+1}.** {name}\n"

        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="show_full_ranking"),
             InlineKeyboardButton(text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π", callback_data="show_global_top")],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π", callback_data="start_ranking"),
             InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await callback_query.message.answer(top5_text, parse_mode="Markdown", reply_markup=keyboard)
        await callback_query.answer()

    async def handle_show_full_ranking(self, callback_query, bot):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        last_ranking = self.session_service.get_last_user_ranking(user_id)
        if not last_ranking:
            await callback_query.answer(MESSAGES["no_rating"], show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        text = "üèÜ **–¢–≤–æ–π –ø–æ–ª–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:**\n\n"
        for i, name in enumerate(last_ranking):
            if i < 3:
                emoji = ["ü•á", "ü•à", "ü•â"][i]
            elif i < 10:
                emoji = "‚≠ê"
            else:
                emoji = "üî∏"
            text += f"{emoji} **{i+1}.** {name}\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback_query.message.answer(text, parse_mode="Markdown", reply_markup=self._post_result_menu)
        await callback_query.answer()

    async def handle_show_global_top(self, callback_query, bot):
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        top = self.session_service.get_global_top_characters(top_n=5)
        if not top:
            await callback_query.answer(MESSAGES["no_global_top"], show_alert=True)
            return
        
        text = "üåç **–ì–ª–æ–±–∞–ª—å–Ω—ã–π –¢–û–ü-5 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n\n"
        for i, name in enumerate(top):
            emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i]
            text += f"{emoji} **{i+1}.** {name}\n"

        await callback_query.message.answer(text, parse_mode="Markdown", reply_markup=self._post_result_menu)
        await callback_query.answer()

    async def handle_rate_new_characters(self, callback_query, bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        if not self.session_service.has_new_characters(user_id):
            await callback_query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏!", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            new_characters = self.session_service.get_new_characters_for_user(user_id)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            session = self.session_service.create_new_characters_session(user_id)
            
            if not session:
                await callback_query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", show_alert=True)
                return
            
            await callback_query.message.answer(
                f"üéØ **–û—Ü–µ–Ω–∫–∞ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n\n"
                f"–°–µ–π—á–∞—Å —Ç—ã –±—É–¥–µ—à—å —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:\n"
                f"{', '.join(new_characters)}\n\n"
                f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥!"
            )
            await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
            await callback_query.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

    async def handle_go_back(self, callback_query, bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        session = self.session_service.get_session(user_id)
        if not session:
            await callback_query.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –£–∑–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É –¥–æ –æ—Ç–º–µ–Ω—ã
        last_pair = session.peek_last_pair()
        if not last_pair:
            await callback_query.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å", show_alert=True)
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
        if self.session_service.undo_last_choice(user_id):
            await callback_query.answer("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ —ç—Ç—É –∂–µ –ø–∞—Ä—É —Å–Ω–æ–≤–∞
            a, b = last_pair
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞—Ä—É, –º–∏–Ω—É—è –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            char_a = self.character_service.get_character_by_index(a)
            char_b = self.character_service.get_character_by_index(b)
            if not char_a or not char_b:
                await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
                return
            try:
                first_caption = f"**{char_a.name}**\n\nüëÜ **–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:**"
                media = [
                    InputMediaPhoto(media=FSInputFile(char_a.image_path), caption=first_caption, parse_mode="Markdown"),
                    InputMediaPhoto(media=FSInputFile(char_b.image_path), caption=f"**{char_b.name}**", parse_mode="Markdown")
                ]
                keyboard_buttons = [
                    [
                        InlineKeyboardButton(text=f"‚ù§Ô∏è {char_a.name}", callback_data=f"choose:{a}:{b}:a"),
                        InlineKeyboardButton(text=f"{char_b.name} ‚ù§Ô∏è", callback_data=f"choose:{a}:{b}:b"),
                    ]
                ]
                if session.choice_history:
                    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")])
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                await bot.send_media_group(callback_query.message.chat.id, media)
                await bot.send_message(
                    callback_query.message.chat.id,
                    "üëá –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
                await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
                await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
        else:
            await callback_query.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å", show_alert=True)
    
    async def handle_continue_session(self, callback_query: types.CallbackQuery, bot) -> None:
        """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥
        if not self._check_flood_control(user_id):
            await callback_query.answer(self._get_flood_warning(user_id), show_alert=True)
            return
        
        session = self.session_service.get_session(user_id)
        
        if not session or session.is_completed:
            await callback_query.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", show_alert=True)
            return
        
        try:
            await callback_query.answer("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É...")
            await self._send_next_pair(callback_query.message.chat.id, user_id, bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")
